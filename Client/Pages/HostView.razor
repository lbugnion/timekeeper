@inject IJSRuntime JSRuntime
@inject NavigationManager Nav
@inject ILogger<HostView> Log
@inject IJSRuntime JSRuntime

@if (Handler.CurrentSession != null
  && Handler.IsAuthorized != null
  && Handler.IsAuthorized.Value)
{
    @if (Branding.CanEditSessionAndGuestName)
    {
        @if (IsEditingSessionName)
        {
            <input class="h1-edit-field" @bind-value="@SessionName" />
        }
        else
        {
            <h1>@SessionName</h1>
        }

        @if (!Handler.IsBusy)
        {
            <div class="edit-link"><a href="#" @onclick="EditSessionName" @onclick:preventDefault>(@EditSessionNameLinkText)</a></div>
        }
    }
    else
    {
        <h1>@Branding.HostPageTitle</h1>
    }


    @if (Program.IsExperimental)
    {
        <blockquote class="warning"><strong>WARNING:</strong> This is an experimental version of Timekeeper currently in development. This can be unstable and cause issues. Use only for test purposes.</blockquote>
    }

    <ul id="listofclocks">

        @foreach (var clock in Handler.CurrentSession.Clocks)
        {
            <li style="background-color: @clock.CurrentBackgroundColor">
                <div class="clock-area">
                    <div class="nudge-buttons-area">
                        <button class="nudge-button"
                                title="Nudge up 30 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, 30))">
                            +30
                        </button>
                        <button class="nudge-button"
                                title="Nudge up 10 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, 10))">
                            +10
                        </button>
                        <button class="nudge-button"
                                title="Nudge down 10 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, -10))">
                            -10
                        </button>
                        <button class="nudge-button"
                                title="Nudge down 30 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, -30))">
                            -30
                        </button>
                    </div>

                    <div class="clock-display-controls-area">
                        <div class="clock-display-area">
                            <div class="clock-label">@clock.Message.Label</div>
                            <div class="clock-text">@clock.ClockDisplay</div>
                        </div>

                        <div class="clock-controls-area">
                            @if (clock.IsClockRunning)
                            {
                                <button @onclick="(e => Handler.StopClock(clock))"
                                        disabled="@clock.IsPlayStopDisabled"
                                        title="Stop this clock">
                                    <i class="fa fa-stop"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="(e => Handler.StartClock(clock, true))"
                                        disabled="@clock.IsPlayStopDisabled"
                                        title="Start this clock">
                                    <i class="fa fa-play"></i>
                                </button>
                            }

                            @if (!Handler.CurrentSession.CreatedFromTemplate)
                            {
                                <button @onclick="(e => ConfigureClock(clock))"
                                        title="Configure this clock"
                                        disabled="@clock.IsConfigDisabled">
                                    <i class="fa fa-cog"></i>
                                </button>
                                <button @onclick="(e => Handler.AddClockAfter(clock))"
                                        title="Add a clock after this one">
                                    <i class="fa fa-plus-square"></i>
                                </button>

                                @if (Handler.CurrentSession.Clocks.Count > 1)
                                {
                                    <button @onclick="(e => Handler.DeleteClock(clock))"
                                            title="Delete this clock"
                                            disabled="@clock.IsDeleteDisabled">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                }
                            }

                            @if (clock.IsSelected)
                            {
                                <button @onclick="clock.ToggleSelect"
                                        title="Unselect this clock"
                                        class="clock-selection">
                                    <i class="fa fa-check-square-o"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="clock.ToggleSelect"
                                        title="Select this clock"
                                        class="clock-selection">
                                    <i class="fa fa-square-o"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </li>
        }

    </ul>
}
else
{
    @if (Handler.IsAuthorized != null)
    {
        @if (Handler.IsAuthorized.Value)
        {
            <blockquote class="no-clocks-no-session">
                Reload this page to create a new session.
            </blockquote>
        }
        else
        {
            <blockquote class="error">
                You are not authorized to access this page. Please contact <a href="mailto:support@timekeeper.cloud">support@timekeeper.cloud</a>.
            </blockquote>
        }
    }
    else
    {
        <blockquote class="no-authorization">
            Checking authorization...
        </blockquote>
    }
}

@if (Handler.IsAuthorized != null
    && Handler.IsAuthorized.Value)
{
    <div class="message-area">
        <p><span class="message-text">@Handler.CurrentMessage</span></p>
    </div>

    <div class="controls-area">

        <div class="send-message-area">
            <div class="form-label">Message to Guests, Click Ctrl-Enter to send</div>
            <div class="form-label">Use *<span style='color:red'>stars</span>* for red</div>

            <textarea @bind="@Handler.InputMessage"
                      id="@SendMessageInputId"
                      @bind:event="oninput"
                      @onkeypress="@HandleKeyPress"
                      @onfocus="@HandleFocus"
                      class="input-text" />

            <br />

            <button disabled="@Handler.IsSendMessageDisabled"
                    @onclick="@Handler.SendInputMessage"
                    id="send-message-button">
                Send Message
            </button>

            @if (Mobile != null
                && Mobile.IsNoSleepVisible)
            {
                <div class="no-sleep-area">
                    <button @onclick="@Mobile.EnableNoSleep"
                            id="send-message-button">
                        Keep device awake
                    </button>
                </div>
            }

        </div>
    </div>

    <h2>Session</h2>

    @if (Handler.CurrentSession != null
  && !Handler.IsInError)
    {
        <div class="session-information-area">
            <h3>Send this link to your guests so they can connect to the session:</h3>

            <p><a href="@GuestUrl">@GuestUrl</a></p>
        </div>

        <div class="session-information-area">
            <h3>Connected guests</h3>

            @if (Handler.ConnectedGuests.Count == 0)
            {
                <p>There are no connected guests at the moment.</p>
            }
            else
            {
                <p>There are @Handler.ConnectedGuests.Count connected guest(s).</p>

                @if (Branding.CanEditSessionAndGuestName)
                {
                    <div class="edit-link" style="margin-top: -10px;"><a href="#" @onclick="ToggleIsGuestListExpanded" @onclick:preventDefault>(@GuestListLinkText)</a></div>
                }
            }

            @if (Branding.CanEditSessionAndGuestName
                && IsGuestListExpanded)
            {
                <ul class="connected-guests-list">
                    @if (Handler.AnonymousGuests > 0)
                    {
                        <li>@Handler.AnonymousGuests anonymous guest(s)</li>
                    }

                    @if (Handler.NamedGuests != null)
                    {
                        foreach (var guest in Handler.NamedGuests)
                        {
                            <li>@guest.DisplayName</li>
                        }
                    }
                </ul>
            }

        </div>
    }

    <div class="controls-area last-controls-area">
        <button disabled="@Handler.IsNavigateToSessionDisabled"
                @onclick="@NavigateToSession">
            Delete the session
        </button>

        @if (Branding.MustAuthorize)
        {
            <button disabled="@Handler.IsNavigateToSessionDisabled"
                    @onclick="@LogOut">
                Log out
            </button>
        }

    </div>
}
