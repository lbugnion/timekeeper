@using Timekeeper.DataModel
@inject IJSRuntime JSRuntime
@inject NavigationManager Nav
@inject ILogger<HostView> Log

@if (Handler.CurrentSession != null
  && Handler.IsAuthorized != null
  && Handler.IsAuthorized.Value)
{
    @if (IsEditingSessionName)
    {
        <input class="h1-edit-field" @bind-value="@SessionName" />
    }
    else
    {
        <h1 class="@Branding.ForegroundClass">@SessionName</h1>
    }

    @if (!Handler.IsBusy)
    {
        <div class="edit-link"><a href="#" @onclick="EditSessionName" @onclick:preventDefault>(@EditSessionNameLinkText)</a></div>
    }

    @if (Program.IsExperimental)
    {
        <blockquote class="warning"><strong>WARNING:</strong> This is an experimental version of Timekeeper currently in development. This can be unstable and cause issues. Use only for test purposes.</blockquote>
    }

    @if (Program.IsBeta)
    {
        <blockquote class="warning"><strong>BETA:</strong> This is the beta version of Timekeeper. <a href="https://github.com/lbugnion/timekeeper/issues">Please report issues here</a>. You can find the <a href="http://www.timekeeper.cloud">stable version of Timekeeper here</a>.</blockquote>
    }

    <ul id="listofclocks">

        @foreach (var clock in Handler.CurrentSession.Clocks)
        {
            <li style="background-color: @clock.CurrentBackgroundColor; color: @clock.CurrentForegroundColor">
                <div class="clock-area">
                    <div class="nudge-buttons-area">
                        <button class="nudge-button"
                                title="Nudge up 30 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, 30))">
                            +30
                        </button>
                        <button class="nudge-button"
                                title="Nudge up 10 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, 10))">
                            +10
                        </button>
                        <button class="nudge-button"
                                title="Nudge down 10 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, -10))">
                            -10
                        </button>
                        <button class="nudge-button"
                                title="Nudge down 30 seconds"
                                disabled="@clock.IsNudgeDisabled"
                                @onclick="(e => Handler.Nudge(clock, -30))">
                            -30
                        </button>
                    </div>

                    <div class="clock-display-controls-area">
                        <div class="clock-display-area">
                            <div class="clock-label">@clock.CurrentLabel</div>
                            <div class="clock-text">@clock.ClockDisplay</div>
                        </div>

                        <div class="clock-controls-area">
                            @if (clock.IsClockRunning)
                            {
                                <button @onclick="(e => Handler.StopClock(clock))"
                                        disabled="@clock.IsPlayStopDisabled"
                                        title="Stop this clock">
                                    <i class="fas fa-stop"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="(e => Handler.StartClock(clock, true))"
                                        disabled="@clock.IsPlayStopDisabled"
                                        title="Start this clock">
                                    <i class="fas fa-play"></i>
                                </button>
                            }

                            <button @onclick="(e => ConfigureClock(clock))"
                                    title="Configure this clock"
                                    disabled="@clock.IsConfigDisabled">
                                <i class="fas fa-cog"></i>
                            </button>
                            <button @onclick="(e => Handler.AddClockAfter(clock))"
                                    title="Add a clock after this one">
                                <i class="fas fa-plus-square"></i>
                            </button>

                            @if (Handler.CurrentSession.Clocks.Count > 1)
                            {
                                <button @onclick="(e => Handler.DeleteClock(clock))"
                                        title="Delete this clock"
                                        disabled="@clock.IsConfigDisabled">
                                    <i class="fas fa-minus-square"></i>
                                </button>
                            }

                            @if (clock.IsSelected)
                            {
                                <button @onclick="clock.ToggleSelect"
                                        title="Unselect this clock"
                                        class="clock-selection">
                                    <i class="far fa-check-circle"></i>
                                </button>
                            }
                            else
                            {
                                <button @onclick="clock.ToggleSelect"
                                        title="Select this clock"
                                        class="clock-selection">
                                    <i class="far fa-circle"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </li>
        }

    </ul>
}
else
{
    @if (Handler.IsAuthorized != null)
    {
        @if (Handler.IsAuthorized.Value)
        {
            <blockquote class="no-clocks-no-session">
                Reload this page to go to the Session selection.
            </blockquote>
        }
        else
        {
            <blockquote class="error">
                You are not authorized to access this page. Please contact <a href="mailto:support@timekeeper.cloud">support@timekeeper.cloud</a>.
            </blockquote>
        }
    }
    else
    {
        <blockquote class="no-authorization">
            Checking authorization...
        </blockquote>
    }
}

@if (Handler.IsAuthorized != null
  && Handler.IsAuthorized.Value)
{
    <div class="controls-area">

        <div class="send-message-area">
            <div class="form-label">Message to Guests, Click [Enter] to send</div>
            <div class="form-label">Use *<span style='color:red'>stars</span>* for red</div>

            <textarea @bind="@Handler.InputMessage"
                      id="@SendMessageInputId"
                      @bind:event="oninput"
                      @onkeypress="@HandleKeyPress"
                      @onfocus="@HandleFocus"
                      class="input-text" />

            <br />

            <button disabled="@Handler.IsSendMessageDisabled"
                    @onclick="@Handler.SendInputMessage">
                Send
            </button>

            <button disabled="@Handler.IsSendMessageDisabled"
                    @onclick="@Handler.ClearInputMessage">
                Clear
            </button>

            @if (Mobile != null
              && Mobile.IsNoSleepVisible)
            {
                <div class="no-sleep-area">
                    <button @onclick="@Mobile.EnableNoSleep"
                            id="send-message-button">
                        Keep device awake
                    </button>
                </div>
            }

        </div>
    </div>

    <div class="message-area">
        <p><span class="message-text">@Handler.CurrentMessage</span></p>
    </div>

    <h2 class="@Branding.ForegroundClass">Session</h2>

    @if (Handler.CurrentSession != null
      && !Handler.IsInError)
    {
        <div class="session-information-area">
            <h3 class="@Branding.ForegroundClass">Send this link to your guests so they can connect to the session:</h3>

            <p><a href="@GuestUrl">@GuestUrl</a></p>

            <p><img src="@GuestUrlQrCode"
                    class="qr-code"
                    alt="Use this QR Code to connect"
                    title="Use this QR Code to connect"/></p>
        </div>

        <div class="session-information-area">

            <h3 class="@Branding.ForegroundClass">Connected guests</h3>

            @if (Handler.ConnectedPeers.Count == 0)
            {
                <p>There are no connected peers at the moment.</p>
            }
            else
            {
                <p>There are @Handler.ConnectedPeers.Count connected peer(s).</p>

                @if (Branding.CanEditGuestName)
                {
                    <div class="edit-link" style="margin-top: -10px;"><a href="#" @onclick="ToggleIsPeersListExpanded" @onclick:preventDefault>(@PeerListLinkText)</a></div>
                }
            }

            @if (Branding.CanEditGuestName
              && IsPeersListExpanded)
            {
                <ul class="connected-peers-list">
                    @if (Handler.AnonymousHosts > 0)
                    {
                        <li>@Handler.AnonymousHosts anonymous host(s)</li>
                    }

                    @if (Handler.NamedHosts != null)
                    {
                        foreach (var host in Handler.NamedHosts)
                        {
                            <li>@host.DisplayName</li>
                        }
                    }

                    @if (Handler.AnonymousGuests > 0)
                    {
                        <li>@Handler.AnonymousGuests anonymous guest(s)</li>
                    }

                    @if (Handler.NamedGuests != null)
                    {
                        foreach (var guest in Handler.NamedGuests)
                        {
                            <li>@guest.DisplayName</li>
                        }
                    }
                </ul>
            }

            <h2>Manage polls</h2>

            <h3>For the producer (you)</h3>

            <p><a href="/polls/@SessionId" target="_blank">Open the Polls window (host)</a></p>

            <h3>For the presenters</h3>

            <p>Send this link to the presenters. It will show the answers' count as the votes come in, but it doesn't not show the polls controls.</p>

            <p><a href="/display-polls/@Handler.CurrentSession.SessionId/@Constants.RolePresenter" target="_blank">
                    Open the Display Polls window (for the presenters)</a></p>

            <h3>For the viewers</h3>

            <p>Send this link in the chats, for all the viewers to vote on the polls.</p>

            <p><a href="/display-polls/@Handler.CurrentSession.SessionId" target="_blank">
                    Open the Display Polls window (for the viewers)</a></p>

            <h2>Manage chats</h2>

            <h3>For the producer (you)</h3>

            <p><a href="/chats/@SessionId" target="_blank">Open the Chats window (host)</a></p>

            <h3>For the chat participants</h3>

            <p>Send this link to whomever can join the chat.</p>

            <p><a href="/display-chats/@Handler.CurrentSession.SessionId" target="_blank">
                    Open the Display Chats window (for the chat participants)</a></p>
        </div>
    }

    <div class="controls-area last-controls-area">

        @if (Branding.AllowSessionSelection)
        {
            <hr />

            <button disabled="@Handler.IsModifySessionDisabled"
                    @onclick="@NavigateToSession">
                Change the session
            </button>
        }
        else
        {
            @if (Handler.IsDeleteSessionWarningVisible)
            {
                <blockquote class="warning">
                    <strong>Deleting the session is irreversible. Are you sure?</strong>
                    <br /><br />
                    If you delete the session and create a new one, all your guests will
                    need to reconnect.
                    <br /><br />
                    <button @onclick="@DoDeleteSession"
                            class="small-button">
                        Yes
                    </button>
                    <button @onclick="@Handler.CancelDeleteSession"
                            class="small-button">
                        No
                    </button>
                </blockquote>
            }

            <button disabled="@Handler.IsModifySessionDisabled"
                    @onclick="@Handler.DeleteSession">
                Delete the session
            </button>
        }

        @if (Branding.MustAuthorize)
        {
            <button disabled="@Handler.IsModifySessionDisabled"
                    @onclick="@LogOut">
                Log out
            </button>
        }

    </div>
}
