@page "/test"
@inject ILogger<TestPage> Log 
@inject HttpClient Http  

@code {
}

@if (_authState == null)
{
    <p>No auth state found</p>
}
else
{
    @if (_authState.User == null)
    {
        <p>No User found</p>
    }
    else
    {
        @if (_authState.User.Identity == null)
        {
            <p>No Identity found</p>
        }
        else
        {
            @if (_authState.User.Identity.IsAuthenticated)
            {
                <p>@_authState.User.Identity.Name is authenticated</p>

                @foreach (var claim in _authState.User.Claims)
                {
                    <p>Claim found: @claim.Type / @claim.Issuer / @claim.Value / @claim.Subject</p>
                }
            }
            else
            {
                <p>User is not authenticated</p>
            }
        }
    }
}

<button @onclick="@CallFunction">Call test function</button>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private AuthenticationState _authState;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateTask;
    }

    public async Task CallFunction()
    {
        Log.LogTrace("HIGHLIGHT--Calling function");

        var response = await Http.GetAsync("/api/test");

        var result = await response.Content.ReadAsStringAsync();

        Log.LogDebug(result);
        Log.LogTrace("HIGHLIGHT--Done calling function");
    }

}